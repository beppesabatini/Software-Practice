package partII.launchers;

import partII.sudoku.SudokuSolver;

/**
 * This class launches the author's solution to solving Sudokus puzzles. Test
 * data, monitoring code, logging code, debug output, and similar support code
 * can be included here.
 * <p>
 * The Sudoku problem is described in the manual "Puzzles for Programmers and
 * Pros," pp. 138-145. (The solution from the manual is said to take two seconds
 * for one puzzle.) The solution tested here is not the one from the manual, but
 * is original.
 * 
 * @author Beppe Sabatini bsabatini@hotmail.com
 *
 */
public class SudokuSolverLauncher {

	/**
	 * A Sudoku puzzle looks like this. Here the zeroes represent a blank space to
	 * be filled in:
	 * 
	 * <pre>
	000 | 000 | 007
	704 | 000 | 893
	006 | 802 | 000
	---------------
	107 | 528 | 600
	080 | 036 | 701
	903 | 400 | 080
	---------------
	000 | 704 | 900
	600 | 090 | 000
	459 | 003 | 108
	 * </pre>
	 * 
	 * The goal is to fill in the blanks in every row, square, and column, with the
	 * numbers 1 through 9, with no repetition of any of the nine digits in any row,
	 * square, or column.
	 * 
	 */
	public void solveSudokuPuzzles() {
		initSudokuData(Difficulty.VERY_DIFFICULT);
		new SudokuSolver().solveSudokus(sudokuData);
	}

	private enum Difficulty {
		VERY_DIFFICULT, WORLDS_HARDEST, NO_SOLUTION_FOUND
	}

	public String[] sudokuData = new String[9];

	// Here the sudoku puzzles are represented as a string of 81 digits./*

	// "000000000000000000000000000000000000000000000000000000000000000000000000000000000"
	//  100000000200000000300000000400000000500000000600000000700000000800000000900000000
	//  123456789123456789123456789123456789123456789123456789123456789123456789123456789
	// "000000000000000000000000000000000000000000000000000000000000000000000000000000000"

	private void initSudokuData(Difficulty dataSet) {
		if (dataSet == Difficulty.VERY_DIFFICULT) {
			// From "https://www.7sudoku.com/very-difficult"
			sudokuData[0] = "210800050000000010008091030100020900000958000009040002060370500030000000040009067";
			sudokuData[1] = "674009010000003080000100002001700060005000200020004100100008000080900000030200758";
			sudokuData[2] = "003000021790400300600030500206900000000503000000002109004080003009004012170000400";
			sudokuData[3] = "030400502100390000400207008010000800300000001006000020700902003000051004201006070";
			sudokuData[4] = "040001090100080002200640000000000067020406030580000000000072004300050006090800050";
			sudokuData[5] = "020700060800006000000010008004008001109040503500900600400090000000300009060004030";
			sudokuData[6] = "000059630150040000000000002006090040040687010010030800900000000000010097031960000";
			sudokuData[7] = "910300008084001070000090600000876030006000700070953000008030000060700850400009027";
			sudokuData[8] = "700060000008900500601000700080091040000302000030570090004000205002008100000050004";
		} else if (dataSet == Difficulty.WORLDS_HARDEST) {
			// The hardest Sudokus ever solved! The website has gone off-line.
			sudokuData[0] = "000003700520000000830000000360850000000000390000340000400030085003007000000100000";
			sudokuData[1] = "000000608900002000000000300500060070000800000000030000020007500038100000000000040";
			sudokuData[2] = "000049000200000500000070000060000074500200000000800000074000090000000201800000000";
			sudokuData[3] = "000010007008000000000000020000908500250000030000400000670000000000800900100020000";
			sudokuData[4] = "000001400000000908300070000000030070092000000040000000600400050000900200000800000";
			sudokuData[5] = "000003700520000000800000009060850000000000390000040000400000085003007000000100000";
			sudokuData[6] = "018000400000050000000090000040200800900000050000000600500000070600800000000401000";
			sudokuData[7] = "000060090500000400100000000000008005007090000300000001020501000000000670000300000";
			sudokuData[8] = "700090000000000034000000050000805200600000900000003000000170000850000000043000000";
		} else if (dataSet == Difficulty.NO_SOLUTION_FOUND) {
			// AI Escargot //
			// https://www.researchgate.net/figure/Sudoku-puzzle-instance-AI-Escargot_fig1_282256807
			sudokuData[0] = "100007090030020008009600500005300900010080002600004000300000010040000007007000300";
			// From https://www.extremesudoku.info/
			sudokuData[1] = "102903405000000000302205009203000907000080000508000102900504008000000000406809201";
			sudokuData[2] = "000000000000000000000000000000000000000000000000000000000000000000000000000000000";
			sudokuData[3] = "000000000000000000000000000000000000000000000000000000000000000000000000000000000";
			sudokuData[4] = "000000000000000000000000000000000000000000000000000000000000000000000000000000000";
			sudokuData[5] = "000000000000000000000000000000000000000000000000000000000000000000000000000000000";
			sudokuData[6] = "000000000000000000000000000000000000000000000000000000000000000000000000000000000";
			sudokuData[7] = "000000000000000000000000000000000000000000000000000000000000000000000000000000000";
			sudokuData[8] = "000000000000000000000000000000000000000000000000000000000000000000000000000000000";
		}
	}

}
